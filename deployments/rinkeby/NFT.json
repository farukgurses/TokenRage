{
  "address": "0xb8509Ae5278BdB53349eBDb9f14BB449e91C5129",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_VRFCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURL",
          "type": "string"
        }
      ],
      "name": "CreatedNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "randomNumber",
          "type": "uint256"
        }
      ],
      "name": "CreatedUnfinishedRandomSVG",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomSVG",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURL",
          "type": "string"
        }
      ],
      "name": "UpdatedNFT",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "create",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "finishMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getFighterById",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wins",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strength",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dexterity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "agility",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "intelligence",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "durability",
              "type": "uint256"
            }
          ],
          "internalType": "struct lib.Fighter",
          "name": "_fighter",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newTrainingContract",
          "type": "address"
        }
      ],
      "name": "setTrainingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToFighter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "level",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wins",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "strength",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "dexterity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "agility",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intelligence",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "durability",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "level",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wins",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "hp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strength",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "dexterity",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "agility",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "intelligence",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "durability",
              "type": "uint256"
            }
          ],
          "internalType": "struct lib.Fighter",
          "name": "_fighter",
          "type": "tuple"
        }
      ],
      "name": "updateFighter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b337e3484448d60c7b7a0469c57fc167a68808713ad50649b63773e1ada3125",
  "receipt": {
    "to": null,
    "from": "0xDD1DC3e4D8C1b5FA806567F98c968DFC9E51390A",
    "contractAddress": "0xb8509Ae5278BdB53349eBDb9f14BB449e91C5129",
    "transactionIndex": 43,
    "gasUsed": "5460607",
    "logsBloom": "0x
    "blockHash": "0x48580743997c07fad1f6a511c1588a943df54ee6922ae80e48252b8ba5818a1a",
    "transactionHash": "0x7b337e3484448d60c7b7a0469c57fc167a68808713ad50649b63773e1ada3125",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 9499972,
        "transactionHash": "0x7b337e3484448d60c7b7a0469c57fc167a68808713ad50649b63773e1ada3125",
        "address": "0xb8509Ae5278BdB53349eBDb9f14BB449e91C5129",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dd1dc3e4d8c1b5fa806567f98c968dfc9e51390a"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x48580743997c07fad1f6a511c1588a943df54ee6922ae80e48252b8ba5818a1a"
      }
    ],
    "blockNumber": 9499972,
    "cumulativeGasUsed": "21635912",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",
    "0x01be23585060835e02b77ef475b0cc51aa1e0709",
    "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",
    "100000000000000000"
  ],
  "solcInputHash": "6d71798ad4706cbfce0b509da5eedd60",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_VRFCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURL\",\"type\":\"string\"}],\"name\":\"CreatedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"randomNumber\",\"type\":\"uint256\"}],\"name\":\"CreatedUnfinishedRandomSVG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomSVG\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURL\",\"type\":\"string\"}],\"name\":\"UpdatedNFT\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"create\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"finishMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getFighterById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexterity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agility\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intelligence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durability\",\"type\":\"uint256\"}],\"internalType\":\"struct lib.Fighter\",\"name\":\"_fighter\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTrainingContract\",\"type\":\"address\"}],\"name\":\"setTrainingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToFighter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexterity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agility\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intelligence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durability\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wins\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dexterity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"agility\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intelligence\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durability\",\"type\":\"uint256\"}],\"internalType\":\"struct lib.Fighter\",\"name\":\"_fighter\",\"type\":\"tuple\"}],\"name\":\"updateFighter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NFT.sol\":\"NFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x188d038a65a945481cc13fe30db334472dfbed61f7959d4478d05feb6303b1ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/Library.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"base64-sol/base64.sol\\\";\\nlibrary lib {\\n    struct Fighter {\\n        uint tokenId;\\n        string name;\\n        uint level;\\n        uint wins;\\n        uint hp;\\n        uint strength;\\n        uint dexterity;\\n        uint agility;\\n        uint intelligence;\\n        uint durability;\\n    } \\n\\n    function toString(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function createSVG(lib.Fighter memory _fighter) internal pure returns (string memory){\\n        string memory svg = string(abi.encodePacked(\\n            \\\"<svg xmlns='http://www.w3.org/2000/svg' height='500' width='500' text-anchor='middle' fill='white' font-size='1.5em'><rect width='500' height='500' style='fill:black;'/><text x='50%' y='20%' font-size='2em'>\\\",\\n            _fighter.name,\\n            \\\"</text><line x1='20%' y1='27%' x2='80%' y2='27%' style='stroke:white'/><text x='50%' y='37%' font-size='1.5em'>Level: \\\",\\n            toString(_fighter.level),\\n            \\\"</text><text x='50%' y='45%' font-size='1.5em'>Wins: \\\",\\n            toString(_fighter.wins),\\n            \\\"</text><line x1='20%' y1='50%' x2='80%' y2='50%' style='stroke:white'/><text x='50%' y='57%'>HP: \\\",\\n            toString(_fighter.hp),\\n            \\\"</text><text x='50%' y='62%'>Strength: \\\",\\n            toString(_fighter.strength),\\n            \\\"</text><text x='50%' y='67%'>Dexterity: \\\",\\n            toString(_fighter.dexterity),\\n            \\\"</text><text x='50%' y='72%'>Agility: \\\",\\n            toString(_fighter.agility),\\n            \\\"</text><text x='50%' y='77%'>Intelligence: \\\",\\n            toString(_fighter.intelligence),\\n            \\\"</text><text x='50%' y='82%'>Durability: \\\",\\n            toString(_fighter.durability),\\n            \\\"</text></svg>\\\"\\n        ));\\n        return svg;\\n    }\\n\\n    function createImageURL(lib.Fighter memory _fighter) internal pure returns (string memory){\\n        string memory svg = createSVG(_fighter);\\n        string memory baseURL = \\\"data:image/svg+xml;base64,\\\";\\n        string memory svgBase64Encoded = Base64.encode(bytes(string(abi.encodePacked(svg))));\\n        string memory imageURI = string(abi.encodePacked(baseURL, svgBase64Encoded));\\n        return imageURI;\\n    }\\n\\n    function createTokenURL(string memory _imageURL, lib.Fighter memory _fighter) internal pure returns(string memory){\\n        string memory baseURL = \\\"data:application/json;base64,\\\";\\n        string memory json = Base64.encode(bytes(abi.encodePacked(\\n            '{\\\"name\\\": \\\"',_fighter.name,\\n            '\\\",\\\"description\\\": \\\"An NFT fighting game\\\",',\\n            '\\\"attributes\\\":[',\\n            '{\\\"trait_type\\\": \\\"Level\\\", \\\"max_value\\\": 100, \\\"value\\\": ',toString(_fighter.level),\\n            '},{\\\"trait_type\\\": \\\"Wins\\\", \\\"value\\\": ',toString(_fighter.wins),\\n            '},{\\\"trait_type\\\": \\\"HP\\\", \\\"max_value\\\": 2000, \\\"value\\\": ',toString(_fighter.hp),\\n            '},{\\\"trait_type\\\": \\\"Strength\\\", \\\"max_value\\\": 1000, \\\"value\\\": ',toString(_fighter.strength),\\n            '},{\\\"trait_type\\\": \\\"Dexterity\\\", \\\"max_value\\\": 1000, \\\"value\\\": ',toString(_fighter.dexterity),\\n            '},{\\\"trait_type\\\": \\\"Agility\\\", \\\"max_value\\\": 1000, \\\"value\\\": ',toString(_fighter.agility),\\n            '},{\\\"trait_type\\\": \\\"Intelligence\\\", \\\"max_value\\\": 1000, \\\"value\\\": ',toString(_fighter.intelligence),\\n            '},{\\\"trait_type\\\": \\\"Durability\\\", \\\"max_value\\\": 1000, \\\"value\\\": ',toString(_fighter.durability),\\n            '}], \\\"image\\\": \\\"', _imageURL,\\n            '\\\"}'\\n        )));\\n        string memory tokenURL = string(abi.encodePacked(baseURL, json));\\n        return tokenURL;\\n    }\\n}\\n\",\"keccak256\":\"0x9b5766b274e9f2bb5e8b19e61f5fec3770d590c124ebbb631d40d667d0cf0f47\",\"license\":\"MIT\"},\"contracts/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\nimport \\\"./Library.sol\\\";\\n\\ncontract NFT is ERC721URIStorage, Ownable, VRFConsumerBase{\\n \\n    event CreatedNFT(uint indexed tokenId, string tokenURL);\\n    event UpdatedNFT(uint indexed tokenId, string tokenURL);\\n    event RequestedRandomSVG(bytes32 indexed requestId, uint256 indexed tokenId);\\n    event CreatedUnfinishedRandomSVG(uint256 indexed tokenId, uint256 indexed randomNumber);\\n\\n    uint256 public tokenCounter;\\n    uint256 public fee;\\n    bytes32 public keyHash;\\n    address private trainingContract;\\n    address private fightingContract;\\n    uint256 private cost;\\n    uint256 private maxSupply;\\n    bool private paused;\\n\\n    mapping(uint => lib.Fighter) public tokenIdToFighter;\\n    mapping(bytes32 => address) internal requestIdToSender;\\n    mapping(bytes32 => uint256) internal requestIdToTokenId;\\n    mapping(uint256 => uint256) internal tokenIdToRandomNumber;\\n\\n\\n\\n    constructor(address _VRFCoordinator, address _linkToken, bytes32 _keyHash, uint256 _fee) \\n        ERC721(\\\"BloodSport\\\", \\\"BLD\\\")\\n        VRFConsumerBase(_VRFCoordinator, _linkToken){\\n        fee = _fee;\\n        keyHash = _keyHash;\\n        tokenCounter = 0;\\n        cost = 1 ether;\\n        maxSupply = 10000;\\n        paused = false;\\n    }\\n    \\n    // --------------------------------------------  MINT NFT ----------------------------------------------//\\n    function create() public payable returns(bytes32 requestId){\\n        require(!paused, \\\"Minting is not active\\\");\\n        require(tokenCounter < maxSupply, \\\"Minting is over\\\");\\n        // require(msg.value >= cost, \\\"Wrong payment\\\");\\n\\n        requestId = requestRandomness(keyHash, fee);\\n        requestIdToSender[requestId] = msg.sender;\\n        uint256 tokenId = tokenCounter;\\n        requestIdToTokenId[requestId] = tokenId;\\n        tokenCounter ++;\\n        emit RequestedRandomSVG(requestId, tokenId);\\n    }\\n\\n    function fulfillRandomness(bytes32 _requestId, uint256 _randomNumber) internal override {\\n        address nftOwner = requestIdToSender[_requestId];\\n        uint256 tokenId = requestIdToTokenId[_requestId];\\n        _safeMint(nftOwner, tokenId);\\n        tokenIdToRandomNumber[tokenId] = _randomNumber;\\n        emit CreatedUnfinishedRandomSVG(tokenId, _randomNumber);\\n    }\\n\\n    function finishMint (uint256 _tokenId) public {\\n        require(bytes(tokenURI(_tokenId)).length <= 0, \\\"tokenURI is already set\\\");\\n        require(tokenCounter > _tokenId, \\\"token has not been minted yet\\\");\\n        require(tokenIdToRandomNumber[_tokenId] > 0 , \\\"ChainLink VRF is not ready\\\");\\n        uint256 randomNumber = tokenIdToRandomNumber[_tokenId];\\n\\n        createFighter(_tokenId, randomNumber);\\n        string memory imageURL = lib.createImageURL(tokenIdToFighter[_tokenId]);\\n        string memory tokenURL = lib.createTokenURL(imageURL, tokenIdToFighter[_tokenId]);\\n        _setTokenURI(_tokenId, tokenURL);\\n        emit CreatedNFT(_tokenId, tokenURL);\\n    }\\n\\n    function totalSupply() public view virtual returns (uint256) {\\n        return tokenCounter;\\n    }\\n\\n    // --------------------------------------------  ON-CHAIN DATA ----------------------------------------------//\\n    function createFighter(uint _tokenId, uint256 _randomNumber) internal {\\n        uint256[] memory stats = new uint[](6);\\n        for(uint i = 0; i < 6; i++){\\n            uint256 newRN = uint256(keccak256(abi.encode(_randomNumber,i)));\\n            if(i == 0) {\\n                stats[i] = ((newRN % 10) + 1);\\n            }else{\\n                stats[i] = ((newRN % (10 * stats[0])) + 1);\\n            }\\n        }\\n        string memory name = string(abi.encodePacked(\\\"BloodSport #\\\", lib.toString(_tokenId)));\\n        tokenIdToFighter[_tokenId] = lib.Fighter(_tokenId, name, stats[0], 0, stats[0]*20, stats[1], stats[2], stats[3], stats[4], stats[5]);\\n    }\\n\\n    function updateFighter(uint _tokenId, lib.Fighter memory _fighter) public {\\n        // require(msg.sender == trainingContract, \\\"Only Training Contract can update Fighter\\\");\\n        tokenIdToFighter[_tokenId] = _fighter;\\n        string memory imageURL = lib.createImageURL(_fighter);\\n        string memory tokenURL = lib.createTokenURL(imageURL, _fighter);\\n        _setTokenURI(_tokenId, tokenURL);\\n        emit UpdatedNFT(_tokenId, tokenURL);\\n    }\\n\\n    // --------------------------------------------  ONLY OWNER ----------------------------------------------//\\n    // function setMaxSupply(uint256 _newMaxSupply) public onlyOwner(){\\n    //     maxSupply = _newMaxSupply;\\n    // }\\n\\n    // function setCost(uint256 _newCost) public onlyOwner(){\\n    //     cost = _newCost;\\n    // }\\n\\n    function setTrainingContract(address _newTrainingContract) public onlyOwner(){\\n        trainingContract = _newTrainingContract;\\n    }\\n\\n    // function setFightingContract(address _newFightingContract) public onlyOwner(){\\n    //     fightingContract = _newFightingContract;\\n    // }\\n\\n    // function pause(bool _state) public onlyOwner(){\\n    //     paused = _state;\\n    // }\\n\\n    // function withdraw() public payable onlyOwner(){\\n    //     require(payable(msg.sender).send(address(this).balance));\\n    // }\\n\\n    function getFighterById(uint256 _tokenId) public view returns(lib.Fighter memory _fighter){\\n        return tokenIdToFighter[_tokenId];\\n    }\\n\\n\\n}\",\"keccak256\":\"0xc7962b28d4532bfee9825b3a0e3a6bf89f9a823a7138f725b73bb0eb563c31ef\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620064223803806200642283398181016040528101906200003791906200037f565b83836040518060400160405280600a81526020017f426c6f6f6453706f7274000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f424c4400000000000000000000000000000000000000000000000000000000008152508160009080519060200190620000bd9291906200028a565b508060019080519060200190620000d69291906200028a565b505050620000f9620000ed620001bc60201b60201c565b620001c460201b60201c565b8173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050505080600a8190555081600b819055506000600981905550670de0b6b3a7640000600e81905550612710600f819055506000601060006101000a81548160ff02191690831515021790555050505050620004e6565b600033905090565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b828054620002989062000433565b90600052602060002090601f016020900481019282620002bc576000855562000308565b82601f10620002d757805160ff191683800117855562000308565b8280016001018555821562000308579182015b8281111562000307578251825591602001919060010190620002ea565b5b5090506200031791906200031b565b5090565b5b80821115620003365760008160009055506001016200031c565b5090565b6000815190506200034b8162000498565b92915050565b6000815190506200036281620004b2565b92915050565b6000815190506200037981620004cc565b92915050565b600080600080608085870312156200039657600080fd5b6000620003a6878288016200033a565b9450506020620003b9878288016200033a565b9350506040620003cc8782880162000351565b9250506060620003df8782880162000368565b91505092959194509250565b6000620003f88262000409565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060028204905060018216806200044c57607f821691505b6020821081141562000463576200046262000469565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b620004a381620003eb565b8114620004af57600080fd5b50565b620004bd81620003ff565b8114620004c957600080fd5b50565b620004d78162000429565b8114620004e357600080fd5b50565b60805160601c60a05160601c615f096200051960003960008181611376015261294d015260006129110152615f096000f3fe60806040526004361061019c5760003560e01c80636352211e116100ec578063b88d4fde1161008a578063ddca3f4311610064578063ddca3f43146105df578063e985e9c51461060a578063efc81a8c14610647578063f2fde38b146106655761019c565b8063b88d4fde1461054e578063c87b56dd14610577578063d082e381146105b45761019c565b80638da5cb5b116100c65780638da5cb5b146104a657806394985ddd146104d157806395d89b41146104fa578063a22cb465146105255761019c565b80636352211e1461041557806370a0823114610452578063715018a61461048f5761019c565b80632bbce2d11161015957806344d510701161013357806344d510701461036f57806348cb16421461039857806361728f39146103c1578063624194c7146103ec5761019c565b80632bbce2d1146102c3578063368dc9f21461030957806342842e0e146103465761019c565b806301ffc9a7146101a157806306fdde03146101de578063081812fc14610209578063095ea7b31461024657806318160ddd1461026f57806323b872dd1461029a575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c39190613a15565b61068e565b6040516101d591906146d9565b60405180910390f35b3480156101ea57600080fd5b506101f3610770565b604051610200919061477d565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b9190613a67565b610802565b60405161023d9190614634565b60405180910390f35b34801561025257600080fd5b5061026d60048036038101906102689190613974565b610887565b005b34801561027b57600080fd5b5061028461099f565b6040516102919190614ac1565b60405180910390f35b3480156102a657600080fd5b506102c160048036038101906102bc919061386e565b6109a9565b005b3480156102cf57600080fd5b506102ea60048036038101906102e59190613a67565b610a09565b6040516103009a99989796959493929190614adc565b60405180910390f35b34801561031557600080fd5b50610330600480360381019061032b9190613a67565b610ae5565b60405161033d9190614a9f565b60405180910390f35b34801561035257600080fd5b5061036d6004803603810190610368919061386e565b610bff565b005b34801561037b57600080fd5b5061039660048036038101906103919190613a90565b610c1f565b005b3480156103a457600080fd5b506103bf60048036038101906103ba9190613809565b610d12565b005b3480156103cd57600080fd5b506103d6610dd2565b6040516103e391906146f4565b60405180910390f35b3480156103f857600080fd5b50610413600480360381019061040e9190613a67565b610dd8565b005b34801561042157600080fd5b5061043c60048036038101906104379190613a67565b611158565b6040516104499190614634565b60405180910390f35b34801561045e57600080fd5b5061047960048036038101906104749190613809565b61120a565b6040516104869190614ac1565b60405180910390f35b34801561049b57600080fd5b506104a46112c2565b005b3480156104b257600080fd5b506104bb61134a565b6040516104c89190614634565b60405180910390f35b3480156104dd57600080fd5b506104f860048036038101906104f391906139d9565b611374565b005b34801561050657600080fd5b5061050f611410565b60405161051c919061477d565b60405180910390f35b34801561053157600080fd5b5061054c60048036038101906105479190613938565b6114a2565b005b34801561055a57600080fd5b50610575600480360381019061057091906138bd565b611623565b005b34801561058357600080fd5b5061059e60048036038101906105999190613a67565b611685565b6040516105ab919061477d565b60405180910390f35b3480156105c057600080fd5b506105c96117d7565b6040516105d69190614ac1565b60405180910390f35b3480156105eb57600080fd5b506105f46117dd565b6040516106019190614ac1565b60405180910390f35b34801561061657600080fd5b50610631600480360381019061062c9190613832565b6117e3565b60405161063e91906146d9565b60405180910390f35b61064f611877565b60405161065c91906146f4565b60405180910390f35b34801561067157600080fd5b5061068c60048036038101906106879190613809565b6119da565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061075957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610769575061076882611ad2565b5b9050919050565b60606000805461077f90614e9c565b80601f01602080910402602001604051908101604052809291908181526020018280546107ab90614e9c565b80156107f85780601f106107cd576101008083540402835291602001916107f8565b820191906000526020600020905b8154815290600101906020018083116107db57829003601f168201915b5050505050905090565b600061080d82611b3c565b61084c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108439061495f565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061089282611158565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fa90614a1f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610922611ba8565b73ffffffffffffffffffffffffffffffffffffffff16148061095157506109508161094b611ba8565b6117e3565b5b610990576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109879061489f565b60405180910390fd5b61099a8383611bb0565b505050565b6000600954905090565b6109ba6109b4611ba8565b82611c69565b6109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f090614a5f565b60405180910390fd5b610a04838383611d47565b505050565b6011602052806000526040600020600091509050806000015490806001018054610a3290614e9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5e90614e9c565b8015610aab5780601f10610a8057610100808354040283529160200191610aab565b820191906000526020600020905b815481529060010190602001808311610a8e57829003601f168201915b505050505090806002015490806003015490806004015490806005015490806006015490806007015490806008015490806009015490508a565b610aed6134a6565b601160008381526020019081526020016000206040518061014001604052908160008201548152602001600182018054610b2690614e9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5290614e9c565b8015610b9f5780601f10610b7457610100808354040283529160200191610b9f565b820191906000526020600020905b815481529060010190602001808311610b8257829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050919050565b610c1a83838360405180602001604052806000815250611623565b505050565b8060116000848152602001908152602001600020600082015181600001556020820151816001019080519060200190610c599291906134f9565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155610100820151816008015561012082015181600901559050506000610cba82611fa3565b90506000610cc8828461204a565b9050610cd4848261215c565b837f8088b75520f63d2193a6f5015badbc4cc953e620977a8c91f11b4227043fcb3882604051610d04919061477d565b60405180910390a250505050565b610d1a611ba8565b73ffffffffffffffffffffffffffffffffffffffff16610d3861134a565b73ffffffffffffffffffffffffffffffffffffffff1614610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d859061497f565b60405180910390fd5b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600b5481565b6000610de382611685565b511115610e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c9061485f565b60405180910390fd5b8060095411610e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e609061479f565b60405180910390fd5b6000601460008381526020019081526020016000205411610ebf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb690614a3f565b60405180910390fd5b600060146000838152602001908152602001600020549050610ee182826121d0565b6000610ff6601160008581526020019081526020016000206040518061014001604052908160008201548152602001600182018054610f1f90614e9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4b90614e9c565b8015610f985780601f10610f6d57610100808354040283529160200191610f98565b820191906000526020600020905b815481529060010190602001808311610f7b57829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152602001600982015481525050611fa3565b9050600061110e8260116000878152602001908152602001600020604051806101400160405290816000820154815260200160018201805461103790614e9c565b80601f016020809104026020016040519081016040528092919081815260200182805461106390614e9c565b80156110b05780601f10611085576101008083540402835291602001916110b0565b820191906000526020600020905b81548152906001019060200180831161109357829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152505061204a565b905061111a848261215c565b837fb5a8d8cf5d01b5006e471421ba7da032446e2a82412342ed548b7aeed0ea9b698260405161114a919061477d565b60405180910390a250505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f8906148df565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561127b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611272906148bf565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6112ca611ba8565b73ffffffffffffffffffffffffffffffffffffffff166112e861134a565b73ffffffffffffffffffffffffffffffffffffffff161461133e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113359061497f565b60405180910390fd5b6113486000612687565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611402576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f9906149ff565b60405180910390fd5b61140c828261274d565b5050565b60606001805461141f90614e9c565b80601f016020809104026020016040519081016040528092919081815260200182805461144b90614e9c565b80156114985780601f1061146d57610100808354040283529160200191611498565b820191906000526020600020905b81548152906001019060200180831161147b57829003601f168201915b5050505050905090565b6114aa611ba8565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150f9061483f565b60405180910390fd5b8060056000611525611ba8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166115d2611ba8565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161161791906146d9565b60405180910390a35050565b61163461162e611ba8565b83611c69565b611673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166a90614a5f565b60405180910390fd5b61167f848484846127f3565b50505050565b606061169082611b3c565b6116cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c69061493f565b60405180910390fd5b60006006600084815260200190815260200160002080546116ef90614e9c565b80601f016020809104026020016040519081016040528092919081815260200182805461171b90614e9c565b80156117685780601f1061173d57610100808354040283529160200191611768565b820191906000526020600020905b81548152906001019060200180831161174b57829003601f168201915b50505050509050600061177961284f565b905060008151141561178f5781925050506117d2565b6000825111156117c45780826040516020016117ac9291906143e6565b604051602081830303815290604052925050506117d2565b6117cd84612866565b925050505b919050565b60095481565b600a5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000601060009054906101000a900460ff16156118c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c09061499f565b60405180910390fd5b600f546009541061190f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190690614a7f565b60405180910390fd5b61191d600b54600a5461290d565b9050336012600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006009549050806013600084815260200190815260200160002081905550600960008154809291906119a390614eff565b919050555080827fd18cd6f82baac9078af064ea020dd3dc7bff649bd8d50684f972d5995fec6e6960405160405180910390a35090565b6119e2611ba8565b73ffffffffffffffffffffffffffffffffffffffff16611a0061134a565b73ffffffffffffffffffffffffffffffffffffffff1614611a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4d9061497f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abd906147df565b60405180910390fd5b611acf81612687565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c2383611158565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611c7482611b3c565b611cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611caa9061487f565b60405180910390fd5b6000611cbe83611158565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611d2d57508373ffffffffffffffffffffffffffffffffffffffff16611d1584610802565b73ffffffffffffffffffffffffffffffffffffffff16145b80611d3e5750611d3d81856117e3565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611d6782611158565b73ffffffffffffffffffffffffffffffffffffffff1614611dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db4906149bf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e249061481f565b60405180910390fd5b611e38838383612a6f565b611e43600082611bb0565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e939190614d9b565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611eea9190614c83565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60606000611fb083612a74565b905060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815250905060006120168360405160200161200291906143cf565b604051602081830303815290604052612b19565b90506000828260405160200161202d9291906143e6565b604051602081830303815290604052905080945050505050919050565b606060006040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081525090506000612128846020015161209d8660400151612cc4565b6120aa8760600151612cc4565b6120b78860800151612cc4565b6120c48960a00151612cc4565b6120d18a60c00151612cc4565b6120de8b60e00151612cc4565b6120ec8c6101000151612cc4565b6120fa8d6101200151612cc4565b8e6040516020016121149a99989796959493929190614519565b604051602081830303815290604052612b19565b90506000828260405160200161213f9291906143e6565b604051602081830303815290604052905080935050505092915050565b61216582611b3c565b6121a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219b906148ff565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906121cb9291906134f9565b505050565b6000600667ffffffffffffffff811115612213577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156122415781602001602082028036833780820191505090505b50905060005b60068110156123ab5760008382604051602001612265929190614b7f565b6040516020818303038152906040528051906020012060001c905060008214156122ec576001600a826122989190614f5c565b6122a29190614c83565b8383815181106122db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050612397565b600183600081518110612328577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600a61233c9190614d41565b826123479190614f5c565b6123519190614c83565b83838151811061238a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250505b5080806123a390614eff565b915050612247565b5060006123b784612cc4565b6040516020016123c7919061440a565b60405160208183030381529060405290506040518061014001604052808581526020018281526020018360008151811061242a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181526020016000815260200160148460008151811061247a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161248c9190614d41565b8152602001836001815181106124cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200183600281518110612512577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200183600381518110612559577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001836004815181106125a0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001836005815181106125e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152506011600086815260200190815260200160002060008201518160000155602082015181600101908051906020019061262b9291906134f9565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015590505050505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006012600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000601360008581526020019081526020016000205490506127a78282612e99565b82601460008381526020019081526020016000208190555082817faad5362ce528ed941024b95d4c18dfd49b8503e1f586a5c353631d98c2af41b760405160405180910390a350505050565b6127fe848484611d47565b61280a84848484612eb7565b612849576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612840906147bf565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061287182611b3c565b6128b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a7906149df565b60405180910390fd5b60006128ba61284f565b905060008151116128da5760405180602001604052806000815250612905565b806128e48461304e565b6040516020016128f59291906143e6565b6040516020818303038152906040525b915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000008486600060405160200161298192919061470f565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016129ae9392919061469b565b602060405180830381600087803b1580156129c857600080fd5b505af11580156129dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0091906139b0565b506000612a238460003060086000898152602001908152602001600020546131fb565b905060016008600086815260200190815260200160002054612a459190614c83565b6008600086815260200190815260200160002081905550612a668482613237565b91505092915050565b505050565b606060008260200151612a8a8460400151612cc4565b612a978560600151612cc4565b612aa48660800151612cc4565b612ab18760a00151612cc4565b612abe8860c00151612cc4565b612acb8960e00151612cc4565b612ad98a6101000151612cc4565b612ae78b6101200151612cc4565b604051602001612aff9998979695949392919061442c565b604051602081830303815290604052905080915050919050565b6060600082511415612b3c57604051806020016040528060008152509050612cbf565b6000604051806060016040528060408152602001615e946040913990506000600360028551612b6b9190614c83565b612b759190614d10565b6004612b819190614d41565b90506000602082612b929190614c83565b67ffffffffffffffff811115612bd1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612c035781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015612c7e576003830192508251603f8160121c1685015160f81b8252600182019150603f81600c1c1685015160f81b8252600182019150603f8160061c1685015160f81b8252600182019150603f811685015160f81b825260018201915050612c17565b600389510660018114612c985760028114612ca857612cb3565b613d3d60f01b6002830352612cb3565b603d60f81b60018303525b50505050508093505050505b919050565b60606000821415612d0c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612e94565b600082905060005b60008214612d3e578080612d2790614eff565b915050600a82612d379190614d10565b9150612d14565b60008167ffffffffffffffff811115612d80577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612db25781602001600182028036833780820191505090505b50905060008290505b60008614612e8c57600181612dd09190614d9b565b90506000600a8088612de29190614d10565b612dec9190614d41565b87612df79190614d9b565b6030612e039190614cd9565b905060008160f81b905080848481518110612e47577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88612e839190614d10565b97505050612dbb565b819450505050505b919050565b612eb382826040518060200160405280600081525061326a565b5050565b6000612ed88473ffffffffffffffffffffffffffffffffffffffff166132c5565b15613041578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612f01611ba8565b8786866040518563ffffffff1660e01b8152600401612f23949392919061464f565b602060405180830381600087803b158015612f3d57600080fd5b505af1925050508015612f6e57506040513d601f19601f82011682018060405250810190612f6b9190613a3e565b60015b612ff1573d8060008114612f9e576040519150601f19603f3d011682016040523d82523d6000602084013e612fa3565b606091505b50600081511415612fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe0906147bf565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613046565b600190505b949350505050565b60606000821415613096576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506131f6565b600082905060005b600082146130c85780806130b190614eff565b915050600a826130c19190614d10565b915061309e565b60008167ffffffffffffffff81111561310a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561313c5781602001600182028036833780820191505090505b5090505b600085146131ef576001826131559190614d9b565b9150600a856131649190614f5c565b60306131709190614c83565b60f81b8183815181106131ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856131e89190614d10565b9450613140565b8093505050505b919050565b6000848484846040516020016132149493929190614738565b6040516020818303038152906040528051906020012060001c9050949350505050565b6000828260405160200161324c9291906143a3565b60405160208183030381529060405280519060200120905092915050565b61327483836132d8565b6132816000848484612eb7565b6132c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132b7906147bf565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161333f9061491f565b60405180910390fd5b61335181611b3c565b15613391576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613388906147ff565b60405180910390fd5b61339d60008383612a6f565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133ed9190614c83565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b604051806101400160405280600081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b82805461350590614e9c565b90600052602060002090601f016020900481019282613527576000855561356e565b82601f1061354057805160ff191683800117855561356e565b8280016001018555821561356e579182015b8281111561356d578251825591602001919060010190613552565b5b50905061357b919061357f565b5090565b5b80821115613598576000816000905550600101613580565b5090565b60006135af6135aa84614bcd565b614ba8565b9050828152602081018484840111156135c757600080fd5b6135d2848285614e5a565b509392505050565b60006135ed6135e884614bfe565b614ba8565b90508281526020810184848401111561360557600080fd5b613610848285614e5a565b509392505050565b60008135905061362781615e20565b92915050565b60008135905061363c81615e37565b92915050565b60008151905061365181615e37565b92915050565b60008135905061366681615e4e565b92915050565b60008135905061367b81615e65565b92915050565b60008151905061369081615e65565b92915050565b600082601f8301126136a757600080fd5b81356136b784826020860161359c565b91505092915050565b600082601f8301126136d157600080fd5b81356136e18482602086016135da565b91505092915050565b600061014082840312156136fd57600080fd5b613708610140614ba8565b90506000613718848285016137f4565b600083015250602082013567ffffffffffffffff81111561373857600080fd5b613744848285016136c0565b6020830152506040613758848285016137f4565b604083015250606061376c848285016137f4565b6060830152506080613780848285016137f4565b60808301525060a0613794848285016137f4565b60a08301525060c06137a8848285016137f4565b60c08301525060e06137bc848285016137f4565b60e0830152506101006137d1848285016137f4565b610100830152506101206137e7848285016137f4565b6101208301525092915050565b60008135905061380381615e7c565b92915050565b60006020828403121561381b57600080fd5b600061382984828501613618565b91505092915050565b6000806040838503121561384557600080fd5b600061385385828601613618565b925050602061386485828601613618565b9150509250929050565b60008060006060848603121561388357600080fd5b600061389186828701613618565b93505060206138a286828701613618565b92505060406138b3868287016137f4565b9150509250925092565b600080600080608085870312156138d357600080fd5b60006138e187828801613618565b94505060206138f287828801613618565b9350506040613903878288016137f4565b925050606085013567ffffffffffffffff81111561392057600080fd5b61392c87828801613696565b91505092959194509250565b6000806040838503121561394b57600080fd5b600061395985828601613618565b925050602061396a8582860161362d565b9150509250929050565b6000806040838503121561398757600080fd5b600061399585828601613618565b92505060206139a6858286016137f4565b9150509250929050565b6000602082840312156139c257600080fd5b60006139d084828501613642565b91505092915050565b600080604083850312156139ec57600080fd5b60006139fa85828601613657565b9250506020613a0b858286016137f4565b9150509250929050565b600060208284031215613a2757600080fd5b6000613a358482850161366c565b91505092915050565b600060208284031215613a5057600080fd5b6000613a5e84828501613681565b91505092915050565b600060208284031215613a7957600080fd5b6000613a87848285016137f4565b91505092915050565b60008060408385031215613aa357600080fd5b6000613ab1858286016137f4565b925050602083013567ffffffffffffffff811115613ace57600080fd5b613ada858286016136ea565b9150509250929050565b613aed81614dcf565b82525050565b613afc81614de1565b82525050565b613b0b81614ded565b82525050565b613b22613b1d82614ded565b614f48565b82525050565b6000613b3382614c2f565b613b3d8185614c45565b9350613b4d818560208601614e69565b613b5681615049565b840191505092915050565b6000613b6c82614c3a565b613b768185614c56565b9350613b86818560208601614e69565b613b8f81615049565b840191505092915050565b6000613ba582614c3a565b613baf8185614c67565b9350613bbf818560208601614e69565b613bc881615049565b840191505092915050565b6000613bde82614c3a565b613be88185614c78565b9350613bf8818560208601614e69565b80840191505092915050565b6000613c11603d83614c78565b9150613c1c8261505a565b603d82019050919050565b6000613c34601d83614c67565b9150613c3f826150a9565b602082019050919050565b6000613c57603283614c67565b9150613c62826150d2565b604082019050919050565b6000613c7a603a83614c78565b9150613c8582615121565b603a82019050919050565b6000613c9d602683614c67565b9150613ca882615170565b604082019050919050565b6000613cc0600c83614c78565b9150613ccb826151bf565b600c82019050919050565b6000613ce3601c83614c67565b9150613cee826151e8565b602082019050919050565b6000613d06602783614c78565b9150613d1182615211565b602782019050919050565b6000613d2960cf83614c78565b9150613d3482615260565b60cf82019050919050565b6000613d4c602983614c78565b9150613d578261536d565b602982019050919050565b6000613d6f603383614c78565b9150613d7a826153bc565b603382019050919050565b6000613d92602483614c67565b9150613d9d8261540b565b604082019050919050565b6000613db5601983614c67565b9150613dc08261545a565b602082019050919050565b6000613dd8601783614c67565b9150613de382615483565b602082019050919050565b6000613dfb603583614c78565b9150613e06826154ac565b603582019050919050565b6000613e1e602c83614c67565b9150613e29826154fb565b604082019050919050565b6000613e41600d83614c78565b9150613e4c8261554a565b600d82019050919050565b6000613e64602883614c78565b9150613e6f82615573565b602882019050919050565b6000613e87603883614c67565b9150613e92826155c2565b604082019050919050565b6000613eaa602a83614c67565b9150613eb582615611565b604082019050919050565b6000613ecd602983614c67565b9150613ed882615660565b604082019050919050565b6000613ef0602e83614c67565b9150613efb826156af565b604082019050919050565b6000613f13600e83614c78565b9150613f1e826156fe565b600e82019050919050565b6000613f36602683614c78565b9150613f4182615727565b602682019050919050565b6000613f59600283614c78565b9150613f6482615776565b600282019050919050565b6000613f7c603b83614c78565b9150613f878261579f565b603b82019050919050565b6000613f9f602083614c67565b9150613faa826157ee565b602082019050919050565b6000613fc2603183614c67565b9150613fcd82615817565b604082019050919050565b6000613fe5603383614c78565b9150613ff082615866565b603382019050919050565b6000614008602c83614c67565b9150614013826158b5565b604082019050919050565b600061402b602083614c67565b915061403682615904565b602082019050919050565b600061404e601583614c67565b91506140598261592d565b602082019050919050565b6000614071603983614c78565b915061407c82615956565b603982019050919050565b6000614094602983614c67565b915061409f826159a5565b604082019050919050565b60006140b7602b83614c78565b91506140c2826159f4565b602b82019050919050565b60006140da602f83614c67565b91506140e582615a43565b604082019050919050565b60006140fd600a83614c78565b915061410882615a92565b600a82019050919050565b6000614120601f83614c67565b915061412b82615abb565b602082019050919050565b6000614143602883614c78565b915061414e82615ae4565b602882019050919050565b6000614166602183614c67565b915061417182615b33565b604082019050919050565b6000614189601a83614c67565b915061419482615b82565b602082019050919050565b60006141ac603183614c67565b91506141b782615bab565b604082019050919050565b60006141cf602283614c78565b91506141da82615bfa565b602282019050919050565b60006141f2607683614c78565b91506141fd82615c49565b607682019050919050565b6000614215600f83614c67565b915061422082615ce4565b602082019050919050565b6000614238606183614c78565b915061424382615d0d565b606182019050919050565b600061425b600e83614c78565b915061426682615da8565b600e82019050919050565b600061427e603883614c78565b915061428982615dd1565b603882019050919050565b6000610140830160008301516142ad600086018261436e565b50602083015184820360208601526142c58282613b61565b91505060408301516142da604086018261436e565b5060608301516142ed606086018261436e565b506080830151614300608086018261436e565b5060a083015161431360a086018261436e565b5060c083015161432660c086018261436e565b5060e083015161433960e086018261436e565b5061010083015161434e61010086018261436e565b5061012083015161436361012086018261436e565b508091505092915050565b61437781614e43565b82525050565b61438681614e43565b82525050565b61439d61439882614e43565b614f52565b82525050565b60006143af8285613b11565b6020820191506143bf828461438c565b6020820191508190509392505050565b60006143db8284613bd3565b915081905092915050565b60006143f28285613bd3565b91506143fe8284613bd3565b91508190509392505050565b600061441582613cb3565b91506144218284613bd3565b915081905092915050565b600061443782613d1c565b9150614443828c613bd3565b915061444e826141e5565b915061445a828b613bd3565b915061446582613dee565b9150614471828a613bd3565b915061447c8261422b565b91506144888289613bd3565b915061449382613cf9565b915061449f8288613bd3565b91506144aa82614136565b91506144b68287613bd3565b91506144c182613f29565b91506144cd8286613bd3565b91506144d8826140aa565b91506144e48285613bd3565b91506144ef82613d3f565b91506144fb8284613bd3565b915061450682613e34565b91508190509a9950505050505050505050565b6000614524826140f0565b9150614530828d613bd3565b915061453b82613e57565b91506145468261424e565b915061455182613fd8565b915061455d828c613bd3565b9150614568826141c2565b9150614574828b613bd3565b915061457f82613d62565b915061458b828a613bd3565b915061459682614064565b91506145a28289613bd3565b91506145ad82613c6d565b91506145b98288613bd3565b91506145c482614271565b91506145d08287613bd3565b91506145db82613c04565b91506145e78286613bd3565b91506145f282613f6f565b91506145fe8285613bd3565b915061460982613f06565b91506146158284613bd3565b915061462082613f4c565b91508190509b9a5050505050505050505050565b60006020820190506146496000830184613ae4565b92915050565b60006080820190506146646000830187613ae4565b6146716020830186613ae4565b61467e604083018561437d565b81810360608301526146908184613b28565b905095945050505050565b60006060820190506146b06000830186613ae4565b6146bd602083018561437d565b81810360408301526146cf8184613b28565b9050949350505050565b60006020820190506146ee6000830184613af3565b92915050565b60006020820190506147096000830184613b02565b92915050565b60006040820190506147246000830185613b02565b614731602083018461437d565b9392505050565b600060808201905061474d6000830187613b02565b61475a602083018661437d565b6147676040830185613ae4565b614774606083018461437d565b95945050505050565b600060208201905081810360008301526147978184613b9a565b905092915050565b600060208201905081810360008301526147b881613c27565b9050919050565b600060208201905081810360008301526147d881613c4a565b9050919050565b600060208201905081810360008301526147f881613c90565b9050919050565b6000602082019050818103600083015261481881613cd6565b9050919050565b6000602082019050818103600083015261483881613d85565b9050919050565b6000602082019050818103600083015261485881613da8565b9050919050565b6000602082019050818103600083015261487881613dcb565b9050919050565b6000602082019050818103600083015261489881613e11565b9050919050565b600060208201905081810360008301526148b881613e7a565b9050919050565b600060208201905081810360008301526148d881613e9d565b9050919050565b600060208201905081810360008301526148f881613ec0565b9050919050565b6000602082019050818103600083015261491881613ee3565b9050919050565b6000602082019050818103600083015261493881613f92565b9050919050565b6000602082019050818103600083015261495881613fb5565b9050919050565b6000602082019050818103600083015261497881613ffb565b9050919050565b600060208201905081810360008301526149988161401e565b9050919050565b600060208201905081810360008301526149b881614041565b9050919050565b600060208201905081810360008301526149d881614087565b9050919050565b600060208201905081810360008301526149f8816140cd565b9050919050565b60006020820190508181036000830152614a1881614113565b9050919050565b60006020820190508181036000830152614a3881614159565b9050919050565b60006020820190508181036000830152614a588161417c565b9050919050565b60006020820190508181036000830152614a788161419f565b9050919050565b60006020820190508181036000830152614a9881614208565b9050919050565b60006020820190508181036000830152614ab98184614294565b905092915050565b6000602082019050614ad6600083018461437d565b92915050565b600061014082019050614af2600083018d61437d565b8181036020830152614b04818c613b9a565b9050614b13604083018b61437d565b614b20606083018a61437d565b614b2d608083018961437d565b614b3a60a083018861437d565b614b4760c083018761437d565b614b5460e083018661437d565b614b6261010083018561437d565b614b7061012083018461437d565b9b9a5050505050505050505050565b6000604082019050614b94600083018561437d565b614ba1602083018461437d565b9392505050565b6000614bb2614bc3565b9050614bbe8282614ece565b919050565b6000604051905090565b600067ffffffffffffffff821115614be857614be761501a565b5b614bf182615049565b9050602081019050919050565b600067ffffffffffffffff821115614c1957614c1861501a565b5b614c2282615049565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614c8e82614e43565b9150614c9983614e43565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614cce57614ccd614f8d565b5b828201905092915050565b6000614ce482614e4d565b9150614cef83614e4d565b92508260ff03821115614d0557614d04614f8d565b5b828201905092915050565b6000614d1b82614e43565b9150614d2683614e43565b925082614d3657614d35614fbc565b5b828204905092915050565b6000614d4c82614e43565b9150614d5783614e43565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d9057614d8f614f8d565b5b828202905092915050565b6000614da682614e43565b9150614db183614e43565b925082821015614dc457614dc3614f8d565b5b828203905092915050565b6000614dda82614e23565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614e87578082015181840152602081019050614e6c565b83811115614e96576000848401525b50505050565b60006002820490506001821680614eb457607f821691505b60208210811415614ec857614ec7614feb565b5b50919050565b614ed782615049565b810181811067ffffffffffffffff82111715614ef657614ef561501a565b5b80604052505050565b6000614f0a82614e43565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614f3d57614f3c614f8d565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000614f6782614e43565b9150614f7283614e43565b925082614f8257614f81614fbc565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f7d2c7b2274726169745f74797065223a2022496e74656c6c6967656e6365222c60008201527f20226d61785f76616c7565223a20313030302c202276616c7565223a20000000602082015250565b7f746f6b656e20686173206e6f74206265656e206d696e74656420796574000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f7d2c7b2274726169745f74797065223a2022446578746572697479222c20226d60008201527f61785f76616c7565223a20313030302c202276616c7565223a20000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f426c6f6f6453706f727420230000000000000000000000000000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f3c2f746578743e3c7465787420783d273530252720793d27363225273e53747260008201527f656e6774683a2000000000000000000000000000000000000000000000000000602082015250565b7f3c73766720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766727206865696768743d27353030272077696474683d273530302760208201527f20746578742d616e63686f723d276d6964646c65272066696c6c3d277768697460408201527f652720666f6e742d73697a653d27312e35656d273e3c7265637420776964746860608201527f3d2735303027206865696768743d2735303027207374796c653d2766696c6c3a60808201527f626c61636b3b272f3e3c7465787420783d273530252720793d2732302527206660a08201527f6f6e742d73697a653d2732656d273e000000000000000000000000000000000060c082015250565b7f3c2f746578743e3c7465787420783d273530252720793d27383225273e44757260008201527f6162696c6974793a200000000000000000000000000000000000000000000000602082015250565b7f7d2c7b2274726169745f74797065223a20224850222c20226d61785f76616c7560008201527f65223a20323030302c202276616c7565223a2000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f746f6b656e55524920697320616c726561647920736574000000000000000000600082015250565b7f3c2f746578743e3c7465787420783d273530252720793d273435252720666f6e60008201527f742d73697a653d27312e35656d273e57696e733a200000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f3c2f746578743e3c2f7376673e00000000000000000000000000000000000000600082015250565b7f222c226465736372697074696f6e223a2022416e204e4654206669676874696e60008201527f672067616d65222c000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f7d5d2c2022696d616765223a2022000000000000000000000000000000000000600082015250565b7f3c2f746578743e3c7465787420783d273530252720793d27373225273e41676960008201527f6c6974793a200000000000000000000000000000000000000000000000000000602082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f7d2c7b2274726169745f74797065223a20224475726162696c697479222c202260008201527f6d61785f76616c7565223a20313030302c202276616c7565223a200000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f7b2274726169745f74797065223a20224c6576656c222c20226d61785f76616c60008201527f7565223a203130302c202276616c7565223a2000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4d696e74696e67206973206e6f74206163746976650000000000000000000000600082015250565b7f7d2c7b2274726169745f74797065223a2022537472656e677468222c20226d6160008201527f785f76616c7565223a20313030302c202276616c7565223a2000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f3c2f746578743e3c7465787420783d273530252720793d27373725273e496e7460008201527f656c6c6967656e63653a20000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f7b226e616d65223a202200000000000000000000000000000000000000000000600082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f3c2f746578743e3c7465787420783d273530252720793d27363725273e44657860008201527f7465726974793a20000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f436861696e4c696e6b20565246206973206e6f74207265616479000000000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f7d2c7b2274726169745f74797065223a202257696e73222c202276616c75652260008201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b7f3c2f746578743e3c6c696e652078313d27323025272079313d2732372527207860008201527f323d27383025272079323d2732372527207374796c653d277374726f6b653a7760208201527f68697465272f3e3c7465787420783d273530252720793d273337252720666f6e60408201527f742d73697a653d27312e35656d273e4c6576656c3a2000000000000000000000606082015250565b7f4d696e74696e67206973206f7665720000000000000000000000000000000000600082015250565b7f3c2f746578743e3c6c696e652078313d27323025272079313d2735302527207860008201527f323d27383025272079323d2735302527207374796c653d277374726f6b653a7760208201527f68697465272f3e3c7465787420783d273530252720793d27353725273e48503a60408201527f2000000000000000000000000000000000000000000000000000000000000000606082015250565b7f2261747472696275746573223a5b000000000000000000000000000000000000600082015250565b7f7d2c7b2274726169745f74797065223a20224167696c697479222c20226d617860008201527f5f76616c7565223a20313030302c202276616c7565223a200000000000000000602082015250565b615e2981614dcf565b8114615e3457600080fd5b50565b615e4081614de1565b8114615e4b57600080fd5b50565b615e5781614ded565b8114615e6257600080fd5b50565b615e6e81614df7565b8114615e7957600080fd5b50565b615e8581614e43565b8114615e9057600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212204ce2a64f19d71dd6fc7b3a009f279935d631c764a36d1457aa33057ddc5462a564736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80636352211e116100ec578063b88d4fde1161008a578063ddca3f4311610064578063ddca3f43146105df578063e985e9c51461060a578063efc81a8c14610647578063f2fde38b146106655761019c565b8063b88d4fde1461054e578063c87b56dd14610577578063d082e381146105b45761019c565b80638da5cb5b116100c65780638da5cb5b146104a657806394985ddd146104d157806395d89b41146104fa578063a22cb465146105255761019c565b80636352211e1461041557806370a0823114610452578063715018a61461048f5761019c565b80632bbce2d11161015957806344d510701161013357806344d510701461036f57806348cb16421461039857806361728f39146103c1578063624194c7146103ec5761019c565b80632bbce2d1146102c3578063368dc9f21461030957806342842e0e146103465761019c565b806301ffc9a7146101a157806306fdde03146101de578063081812fc14610209578063095ea7b31461024657806318160ddd1461026f57806323b872dd1461029a575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c39190613a15565b61068e565b6040516101d591906146d9565b60405180910390f35b3480156101ea57600080fd5b506101f3610770565b604051610200919061477d565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b9190613a67565b610802565b60405161023d9190614634565b60405180910390f35b34801561025257600080fd5b5061026d60048036038101906102689190613974565b610887565b005b34801561027b57600080fd5b5061028461099f565b6040516102919190614ac1565b60405180910390f35b3480156102a657600080fd5b506102c160048036038101906102bc919061386e565b6109a9565b005b3480156102cf57600080fd5b506102ea60048036038101906102e59190613a67565b610a09565b6040516103009a99989796959493929190614adc565b60405180910390f35b34801561031557600080fd5b50610330600480360381019061032b9190613a67565b610ae5565b60405161033d9190614a9f565b60405180910390f35b34801561035257600080fd5b5061036d6004803603810190610368919061386e565b610bff565b005b34801561037b57600080fd5b5061039660048036038101906103919190613a90565b610c1f565b005b3480156103a457600080fd5b506103bf60048036038101906103ba9190613809565b610d12565b005b3480156103cd57600080fd5b506103d6610dd2565b6040516103e391906146f4565b60405180910390f35b3480156103f857600080fd5b50610413600480360381019061040e9190613a67565b610dd8565b005b34801561042157600080fd5b5061043c60048036038101906104379190613a67565b611158565b6040516104499190614634565b60405180910390f35b34801561045e57600080fd5b5061047960048036038101906104749190613809565b61120a565b6040516104869190614ac1565b60405180910390f35b34801561049b57600080fd5b506104a46112c2565b005b3480156104b257600080fd5b506104bb61134a565b6040516104c89190614634565b60405180910390f35b3480156104dd57600080fd5b506104f860048036038101906104f391906139d9565b611374565b005b34801561050657600080fd5b5061050f611410565b60405161051c919061477d565b60405180910390f35b34801561053157600080fd5b5061054c60048036038101906105479190613938565b6114a2565b005b34801561055a57600080fd5b50610575600480360381019061057091906138bd565b611623565b005b34801561058357600080fd5b5061059e60048036038101906105999190613a67565b611685565b6040516105ab919061477d565b60405180910390f35b3480156105c057600080fd5b506105c96117d7565b6040516105d69190614ac1565b60405180910390f35b3480156105eb57600080fd5b506105f46117dd565b6040516106019190614ac1565b60405180910390f35b34801561061657600080fd5b50610631600480360381019061062c9190613832565b6117e3565b60405161063e91906146d9565b60405180910390f35b61064f611877565b60405161065c91906146f4565b60405180910390f35b34801561067157600080fd5b5061068c60048036038101906106879190613809565b6119da565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061075957507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610769575061076882611ad2565b5b9050919050565b60606000805461077f90614e9c565b80601f01602080910402602001604051908101604052809291908181526020018280546107ab90614e9c565b80156107f85780601f106107cd576101008083540402835291602001916107f8565b820191906000526020600020905b8154815290600101906020018083116107db57829003601f168201915b5050505050905090565b600061080d82611b3c565b61084c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108439061495f565b60405180910390fd5b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061089282611158565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610903576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fa90614a1f565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610922611ba8565b73ffffffffffffffffffffffffffffffffffffffff16148061095157506109508161094b611ba8565b6117e3565b5b610990576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109879061489f565b60405180910390fd5b61099a8383611bb0565b505050565b6000600954905090565b6109ba6109b4611ba8565b82611c69565b6109f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f090614a5f565b60405180910390fd5b610a04838383611d47565b505050565b6011602052806000526040600020600091509050806000015490806001018054610a3290614e9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5e90614e9c565b8015610aab5780601f10610a8057610100808354040283529160200191610aab565b820191906000526020600020905b815481529060010190602001808311610a8e57829003601f168201915b505050505090806002015490806003015490806004015490806005015490806006015490806007015490806008015490806009015490508a565b610aed6134a6565b601160008381526020019081526020016000206040518061014001604052908160008201548152602001600182018054610b2690614e9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b5290614e9c565b8015610b9f5780601f10610b7457610100808354040283529160200191610b9f565b820191906000526020600020905b815481529060010190602001808311610b8257829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815260200160078201548152602001600882015481526020016009820154815250509050919050565b610c1a83838360405180602001604052806000815250611623565b505050565b8060116000848152602001908152602001600020600082015181600001556020820151816001019080519060200190610c599291906134f9565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155610100820151816008015561012082015181600901559050506000610cba82611fa3565b90506000610cc8828461204a565b9050610cd4848261215c565b837f8088b75520f63d2193a6f5015badbc4cc953e620977a8c91f11b4227043fcb3882604051610d04919061477d565b60405180910390a250505050565b610d1a611ba8565b73ffffffffffffffffffffffffffffffffffffffff16610d3861134a565b73ffffffffffffffffffffffffffffffffffffffff1614610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d859061497f565b60405180910390fd5b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600b5481565b6000610de382611685565b511115610e25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1c9061485f565b60405180910390fd5b8060095411610e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e609061479f565b60405180910390fd5b6000601460008381526020019081526020016000205411610ebf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eb690614a3f565b60405180910390fd5b600060146000838152602001908152602001600020549050610ee182826121d0565b6000610ff6601160008581526020019081526020016000206040518061014001604052908160008201548152602001600182018054610f1f90614e9c565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4b90614e9c565b8015610f985780601f10610f6d57610100808354040283529160200191610f98565b820191906000526020600020905b815481529060010190602001808311610f7b57829003601f168201915b5050505050815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815260200160088201548152602001600982015481525050611fa3565b9050600061110e8260116000878152602001908152602001600020604051806101400160405290816000820154815260200160018201805461103790614e9c565b80601f016020809104026020016040519081016040528092919081815260200182805461106390614e9c565b80156110b05780601f10611085576101008083540402835291602001916110b0565b820191906000526020600020905b81548152906001019060200180831161109357829003601f168201915b505050505081526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820154815260200160098201548152505061204a565b905061111a848261215c565b837fb5a8d8cf5d01b5006e471421ba7da032446e2a82412342ed548b7aeed0ea9b698260405161114a919061477d565b60405180910390a250505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611201576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f8906148df565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561127b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611272906148bf565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6112ca611ba8565b73ffffffffffffffffffffffffffffffffffffffff166112e861134a565b73ffffffffffffffffffffffffffffffffffffffff161461133e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113359061497f565b60405180910390fd5b6113486000612687565b565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611402576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f9906149ff565b60405180910390fd5b61140c828261274d565b5050565b60606001805461141f90614e9c565b80601f016020809104026020016040519081016040528092919081815260200182805461144b90614e9c565b80156114985780601f1061146d57610100808354040283529160200191611498565b820191906000526020600020905b81548152906001019060200180831161147b57829003601f168201915b5050505050905090565b6114aa611ba8565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611518576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150f9061483f565b60405180910390fd5b8060056000611525611ba8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166115d2611ba8565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161161791906146d9565b60405180910390a35050565b61163461162e611ba8565b83611c69565b611673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166a90614a5f565b60405180910390fd5b61167f848484846127f3565b50505050565b606061169082611b3c565b6116cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c69061493f565b60405180910390fd5b60006006600084815260200190815260200160002080546116ef90614e9c565b80601f016020809104026020016040519081016040528092919081815260200182805461171b90614e9c565b80156117685780601f1061173d57610100808354040283529160200191611768565b820191906000526020600020905b81548152906001019060200180831161174b57829003601f168201915b50505050509050600061177961284f565b905060008151141561178f5781925050506117d2565b6000825111156117c45780826040516020016117ac9291906143e6565b604051602081830303815290604052925050506117d2565b6117cd84612866565b925050505b919050565b60095481565b600a5481565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000601060009054906101000a900460ff16156118c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c09061499f565b60405180910390fd5b600f546009541061190f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190690614a7f565b60405180910390fd5b61191d600b54600a5461290d565b9050336012600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060006009549050806013600084815260200190815260200160002081905550600960008154809291906119a390614eff565b919050555080827fd18cd6f82baac9078af064ea020dd3dc7bff649bd8d50684f972d5995fec6e6960405160405180910390a35090565b6119e2611ba8565b73ffffffffffffffffffffffffffffffffffffffff16611a0061134a565b73ffffffffffffffffffffffffffffffffffffffff1614611a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4d9061497f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abd906147df565b60405180910390fd5b611acf81612687565b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c2383611158565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611c7482611b3c565b611cb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611caa9061487f565b60405180910390fd5b6000611cbe83611158565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611d2d57508373ffffffffffffffffffffffffffffffffffffffff16611d1584610802565b73ffffffffffffffffffffffffffffffffffffffff16145b80611d3e5750611d3d81856117e3565b5b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16611d6782611158565b73ffffffffffffffffffffffffffffffffffffffff1614611dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db4906149bf565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611e2d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e249061481f565b60405180910390fd5b611e38838383612a6f565b611e43600082611bb0565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e939190614d9b565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611eea9190614c83565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b60606000611fb083612a74565b905060006040518060400160405280601a81526020017f646174613a696d6167652f7376672b786d6c3b6261736536342c000000000000815250905060006120168360405160200161200291906143cf565b604051602081830303815290604052612b19565b90506000828260405160200161202d9291906143e6565b604051602081830303815290604052905080945050505050919050565b606060006040518060400160405280601d81526020017f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c00000081525090506000612128846020015161209d8660400151612cc4565b6120aa8760600151612cc4565b6120b78860800151612cc4565b6120c48960a00151612cc4565b6120d18a60c00151612cc4565b6120de8b60e00151612cc4565b6120ec8c6101000151612cc4565b6120fa8d6101200151612cc4565b8e6040516020016121149a99989796959493929190614519565b604051602081830303815290604052612b19565b90506000828260405160200161213f9291906143e6565b604051602081830303815290604052905080935050505092915050565b61216582611b3c565b6121a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161219b906148ff565b60405180910390fd5b806006600084815260200190815260200160002090805190602001906121cb9291906134f9565b505050565b6000600667ffffffffffffffff811115612213577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156122415781602001602082028036833780820191505090505b50905060005b60068110156123ab5760008382604051602001612265929190614b7f565b6040516020818303038152906040528051906020012060001c905060008214156122ec576001600a826122989190614f5c565b6122a29190614c83565b8383815181106122db577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050612397565b600183600081518110612328577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600a61233c9190614d41565b826123479190614f5c565b6123519190614c83565b83838151811061238a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250505b5080806123a390614eff565b915050612247565b5060006123b784612cc4565b6040516020016123c7919061440a565b60405160208183030381529060405290506040518061014001604052808581526020018281526020018360008151811061242a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015181526020016000815260200160148460008151811061247a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161248c9190614d41565b8152602001836001815181106124cb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200183600281518110612512577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151815260200183600381518110612559577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001836004815181106125a0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152602001836005815181106125e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518152506011600086815260200190815260200160002060008201518160000155602082015181600101908051906020019061262b9291906134f9565b5060408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080155610120820151816009015590505050505050565b6000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006012600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000601360008581526020019081526020016000205490506127a78282612e99565b82601460008381526020019081526020016000208190555082817faad5362ce528ed941024b95d4c18dfd49b8503e1f586a5c353631d98c2af41b760405160405180910390a350505050565b6127fe848484611d47565b61280a84848484612eb7565b612849576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612840906147bf565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b606061287182611b3c565b6128b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128a7906149df565b60405180910390fd5b60006128ba61284f565b905060008151116128da5760405180602001604052806000815250612905565b806128e48461304e565b6040516020016128f59291906143e6565b6040516020818303038152906040525b915050919050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f00000000000000000000000000000000000000000000000000000000000000008486600060405160200161298192919061470f565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016129ae9392919061469b565b602060405180830381600087803b1580156129c857600080fd5b505af11580156129dc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0091906139b0565b506000612a238460003060086000898152602001908152602001600020546131fb565b905060016008600086815260200190815260200160002054612a459190614c83565b6008600086815260200190815260200160002081905550612a668482613237565b91505092915050565b505050565b606060008260200151612a8a8460400151612cc4565b612a978560600151612cc4565b612aa48660800151612cc4565b612ab18760a00151612cc4565b612abe8860c00151612cc4565b612acb8960e00151612cc4565b612ad98a6101000151612cc4565b612ae78b6101200151612cc4565b604051602001612aff9998979695949392919061442c565b604051602081830303815290604052905080915050919050565b6060600082511415612b3c57604051806020016040528060008152509050612cbf565b6000604051806060016040528060408152602001615e946040913990506000600360028551612b6b9190614c83565b612b759190614d10565b6004612b819190614d41565b90506000602082612b929190614c83565b67ffffffffffffffff811115612bd1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612c035781602001600182028036833780820191505090505b509050818152600183018586518101602084015b81831015612c7e576003830192508251603f8160121c1685015160f81b8252600182019150603f81600c1c1685015160f81b8252600182019150603f8160061c1685015160f81b8252600182019150603f811685015160f81b825260018201915050612c17565b600389510660018114612c985760028114612ca857612cb3565b613d3d60f01b6002830352612cb3565b603d60f81b60018303525b50505050508093505050505b919050565b60606000821415612d0c576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612e94565b600082905060005b60008214612d3e578080612d2790614eff565b915050600a82612d379190614d10565b9150612d14565b60008167ffffffffffffffff811115612d80577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612db25781602001600182028036833780820191505090505b50905060008290505b60008614612e8c57600181612dd09190614d9b565b90506000600a8088612de29190614d10565b612dec9190614d41565b87612df79190614d9b565b6030612e039190614cd9565b905060008160f81b905080848481518110612e47577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a88612e839190614d10565b97505050612dbb565b819450505050505b919050565b612eb382826040518060200160405280600081525061326a565b5050565b6000612ed88473ffffffffffffffffffffffffffffffffffffffff166132c5565b15613041578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612f01611ba8565b8786866040518563ffffffff1660e01b8152600401612f23949392919061464f565b602060405180830381600087803b158015612f3d57600080fd5b505af1925050508015612f6e57506040513d601f19601f82011682018060405250810190612f6b9190613a3e565b60015b612ff1573d8060008114612f9e576040519150601f19603f3d011682016040523d82523d6000602084013e612fa3565b606091505b50600081511415612fe9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe0906147bf565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613046565b600190505b949350505050565b60606000821415613096576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506131f6565b600082905060005b600082146130c85780806130b190614eff565b915050600a826130c19190614d10565b915061309e565b60008167ffffffffffffffff81111561310a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561313c5781602001600182028036833780820191505090505b5090505b600085146131ef576001826131559190614d9b565b9150600a856131649190614f5c565b60306131709190614c83565b60f81b8183815181106131ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856131e89190614d10565b9450613140565b8093505050505b919050565b6000848484846040516020016132149493929190614738565b6040516020818303038152906040528051906020012060001c9050949350505050565b6000828260405160200161324c9291906143a3565b60405160208183030381529060405280519060200120905092915050565b61327483836132d8565b6132816000848484612eb7565b6132c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132b7906147bf565b60405180910390fd5b505050565b600080823b905060008111915050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613348576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161333f9061491f565b60405180910390fd5b61335181611b3c565b15613391576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613388906147ff565b60405180910390fd5b61339d60008383612a6f565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133ed9190614c83565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b604051806101400160405280600081526020016060815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b82805461350590614e9c565b90600052602060002090601f016020900481019282613527576000855561356e565b82601f1061354057805160ff191683800117855561356e565b8280016001018555821561356e579182015b8281111561356d578251825591602001919060010190613552565b5b50905061357b919061357f565b5090565b5b80821115613598576000816000905550600101613580565b5090565b60006135af6135aa84614bcd565b614ba8565b9050828152602081018484840111156135c757600080fd5b6135d2848285614e5a565b509392505050565b60006135ed6135e884614bfe565b614ba8565b90508281526020810184848401111561360557600080fd5b613610848285614e5a565b509392505050565b60008135905061362781615e20565b92915050565b60008135905061363c81615e37565b92915050565b60008151905061365181615e37565b92915050565b60008135905061366681615e4e565b92915050565b60008135905061367b81615e65565b92915050565b60008151905061369081615e65565b92915050565b600082601f8301126136a757600080fd5b81356136b784826020860161359c565b91505092915050565b600082601f8301126136d157600080fd5b81356136e18482602086016135da565b91505092915050565b600061014082840312156136fd57600080fd5b613708610140614ba8565b90506000613718848285016137f4565b600083015250602082013567ffffffffffffffff81111561373857600080fd5b613744848285016136c0565b6020830152506040613758848285016137f4565b604083015250606061376c848285016137f4565b6060830152506080613780848285016137f4565b60808301525060a0613794848285016137f4565b60a08301525060c06137a8848285016137f4565b60c08301525060e06137bc848285016137f4565b60e0830152506101006137d1848285016137f4565b610100830152506101206137e7848285016137f4565b6101208301525092915050565b60008135905061380381615e7c565b92915050565b60006020828403121561381b57600080fd5b600061382984828501613618565b91505092915050565b6000806040838503121561384557600080fd5b600061385385828601613618565b925050602061386485828601613618565b9150509250929050565b60008060006060848603121561388357600080fd5b600061389186828701613618565b93505060206138a286828701613618565b92505060406138b3868287016137f4565b9150509250925092565b600080600080608085870312156138d357600080fd5b60006138e187828801613618565b94505060206138f287828801613618565b9350506040613903878288016137f4565b925050606085013567ffffffffffffffff81111561392057600080fd5b61392c87828801613696565b91505092959194509250565b6000806040838503121561394b57600080fd5b600061395985828601613618565b925050602061396a8582860161362d565b9150509250929050565b6000806040838503121561398757600080fd5b600061399585828601613618565b92505060206139a6858286016137f4565b9150509250929050565b6000602082840312156139c257600080fd5b60006139d084828501613642565b91505092915050565b600080604083850312156139ec57600080fd5b60006139fa85828601613657565b9250506020613a0b858286016137f4565b9150509250929050565b600060208284031215613a2757600080fd5b6000613a358482850161366c565b91505092915050565b600060208284031215613a5057600080fd5b6000613a5e84828501613681565b91505092915050565b600060208284031215613a7957600080fd5b6000613a87848285016137f4565b91505092915050565b60008060408385031215613aa357600080fd5b6000613ab1858286016137f4565b925050602083013567ffffffffffffffff811115613ace57600080fd5b613ada858286016136ea565b9150509250929050565b613aed81614dcf565b82525050565b613afc81614de1565b82525050565b613b0b81614ded565b82525050565b613b22613b1d82614ded565b614f48565b82525050565b6000613b3382614c2f565b613b3d8185614c45565b9350613b4d818560208601614e69565b613b5681615049565b840191505092915050565b6000613b6c82614c3a565b613b768185614c56565b9350613b86818560208601614e69565b613b8f81615049565b840191505092915050565b6000613ba582614c3a565b613baf8185614c67565b9350613bbf818560208601614e69565b613bc881615049565b840191505092915050565b6000613bde82614c3a565b613be88185614c78565b9350613bf8818560208601614e69565b80840191505092915050565b6000613c11603d83614c78565b9150613c1c8261505a565b603d82019050919050565b6000613c34601d83614c67565b9150613c3f826150a9565b602082019050919050565b6000613c57603283614c67565b9150613c62826150d2565b604082019050919050565b6000613c7a603a83614c78565b9150613c8582615121565b603a82019050919050565b6000613c9d602683614c67565b9150613ca882615170565b604082019050919050565b6000613cc0600c83614c78565b9150613ccb826151bf565b600c82019050919050565b6000613ce3601c83614c67565b9150613cee826151e8565b602082019050919050565b6000613d06602783614c78565b9150613d1182615211565b602782019050919050565b6000613d2960cf83614c78565b9150613d3482615260565b60cf82019050919050565b6000613d4c602983614c78565b9150613d578261536d565b602982019050919050565b6000613d6f603383614c78565b9150613d7a826153bc565b603382019050919050565b6000613d92602483614c67565b9150613d9d8261540b565b604082019050919050565b6000613db5601983614c67565b9150613dc08261545a565b602082019050919050565b6000613dd8601783614c67565b9150613de382615483565b602082019050919050565b6000613dfb603583614c78565b9150613e06826154ac565b603582019050919050565b6000613e1e602c83614c67565b9150613e29826154fb565b604082019050919050565b6000613e41600d83614c78565b9150613e4c8261554a565b600d82019050919050565b6000613e64602883614c78565b9150613e6f82615573565b602882019050919050565b6000613e87603883614c67565b9150613e92826155c2565b604082019050919050565b6000613eaa602a83614c67565b9150613eb582615611565b604082019050919050565b6000613ecd602983614c67565b9150613ed882615660565b604082019050919050565b6000613ef0602e83614c67565b9150613efb826156af565b604082019050919050565b6000613f13600e83614c78565b9150613f1e826156fe565b600e82019050919050565b6000613f36602683614c78565b9150613f4182615727565b602682019050919050565b6000613f59600283614c78565b9150613f6482615776565b600282019050919050565b6000613f7c603b83614c78565b9150613f878261579f565b603b82019050919050565b6000613f9f602083614c67565b9150613faa826157ee565b602082019050919050565b6000613fc2603183614c67565b9150613fcd82615817565b604082019050919050565b6000613fe5603383614c78565b9150613ff082615866565b603382019050919050565b6000614008602c83614c67565b9150614013826158b5565b604082019050919050565b600061402b602083614c67565b915061403682615904565b602082019050919050565b600061404e601583614c67565b91506140598261592d565b602082019050919050565b6000614071603983614c78565b915061407c82615956565b603982019050919050565b6000614094602983614c67565b915061409f826159a5565b604082019050919050565b60006140b7602b83614c78565b91506140c2826159f4565b602b82019050919050565b60006140da602f83614c67565b91506140e582615a43565b604082019050919050565b60006140fd600a83614c78565b915061410882615a92565b600a82019050919050565b6000614120601f83614c67565b915061412b82615abb565b602082019050919050565b6000614143602883614c78565b915061414e82615ae4565b602882019050919050565b6000614166602183614c67565b915061417182615b33565b604082019050919050565b6000614189601a83614c67565b915061419482615b82565b602082019050919050565b60006141ac603183614c67565b91506141b782615bab565b604082019050919050565b60006141cf602283614c78565b91506141da82615bfa565b602282019050919050565b60006141f2607683614c78565b91506141fd82615c49565b607682019050919050565b6000614215600f83614c67565b915061422082615ce4565b602082019050919050565b6000614238606183614c78565b915061424382615d0d565b606182019050919050565b600061425b600e83614c78565b915061426682615da8565b600e82019050919050565b600061427e603883614c78565b915061428982615dd1565b603882019050919050565b6000610140830160008301516142ad600086018261436e565b50602083015184820360208601526142c58282613b61565b91505060408301516142da604086018261436e565b5060608301516142ed606086018261436e565b506080830151614300608086018261436e565b5060a083015161431360a086018261436e565b5060c083015161432660c086018261436e565b5060e083015161433960e086018261436e565b5061010083015161434e61010086018261436e565b5061012083015161436361012086018261436e565b508091505092915050565b61437781614e43565b82525050565b61438681614e43565b82525050565b61439d61439882614e43565b614f52565b82525050565b60006143af8285613b11565b6020820191506143bf828461438c565b6020820191508190509392505050565b60006143db8284613bd3565b915081905092915050565b60006143f28285613bd3565b91506143fe8284613bd3565b91508190509392505050565b600061441582613cb3565b91506144218284613bd3565b915081905092915050565b600061443782613d1c565b9150614443828c613bd3565b915061444e826141e5565b915061445a828b613bd3565b915061446582613dee565b9150614471828a613bd3565b915061447c8261422b565b91506144888289613bd3565b915061449382613cf9565b915061449f8288613bd3565b91506144aa82614136565b91506144b68287613bd3565b91506144c182613f29565b91506144cd8286613bd3565b91506144d8826140aa565b91506144e48285613bd3565b91506144ef82613d3f565b91506144fb8284613bd3565b915061450682613e34565b91508190509a9950505050505050505050565b6000614524826140f0565b9150614530828d613bd3565b915061453b82613e57565b91506145468261424e565b915061455182613fd8565b915061455d828c613bd3565b9150614568826141c2565b9150614574828b613bd3565b915061457f82613d62565b915061458b828a613bd3565b915061459682614064565b91506145a28289613bd3565b91506145ad82613c6d565b91506145b98288613bd3565b91506145c482614271565b91506145d08287613bd3565b91506145db82613c04565b91506145e78286613bd3565b91506145f282613f6f565b91506145fe8285613bd3565b915061460982613f06565b91506146158284613bd3565b915061462082613f4c565b91508190509b9a5050505050505050505050565b60006020820190506146496000830184613ae4565b92915050565b60006080820190506146646000830187613ae4565b6146716020830186613ae4565b61467e604083018561437d565b81810360608301526146908184613b28565b905095945050505050565b60006060820190506146b06000830186613ae4565b6146bd602083018561437d565b81810360408301526146cf8184613b28565b9050949350505050565b60006020820190506146ee6000830184613af3565b92915050565b60006020820190506147096000830184613b02565b92915050565b60006040820190506147246000830185613b02565b614731602083018461437d565b9392505050565b600060808201905061474d6000830187613b02565b61475a602083018661437d565b6147676040830185613ae4565b614774606083018461437d565b95945050505050565b600060208201905081810360008301526147978184613b9a565b905092915050565b600060208201905081810360008301526147b881613c27565b9050919050565b600060208201905081810360008301526147d881613c4a565b9050919050565b600060208201905081810360008301526147f881613c90565b9050919050565b6000602082019050818103600083015261481881613cd6565b9050919050565b6000602082019050818103600083015261483881613d85565b9050919050565b6000602082019050818103600083015261485881613da8565b9050919050565b6000602082019050818103600083015261487881613dcb565b9050919050565b6000602082019050818103600083015261489881613e11565b9050919050565b600060208201905081810360008301526148b881613e7a565b9050919050565b600060208201905081810360008301526148d881613e9d565b9050919050565b600060208201905081810360008301526148f881613ec0565b9050919050565b6000602082019050818103600083015261491881613ee3565b9050919050565b6000602082019050818103600083015261493881613f92565b9050919050565b6000602082019050818103600083015261495881613fb5565b9050919050565b6000602082019050818103600083015261497881613ffb565b9050919050565b600060208201905081810360008301526149988161401e565b9050919050565b600060208201905081810360008301526149b881614041565b9050919050565b600060208201905081810360008301526149d881614087565b9050919050565b600060208201905081810360008301526149f8816140cd565b9050919050565b60006020820190508181036000830152614a1881614113565b9050919050565b60006020820190508181036000830152614a3881614159565b9050919050565b60006020820190508181036000830152614a588161417c565b9050919050565b60006020820190508181036000830152614a788161419f565b9050919050565b60006020820190508181036000830152614a9881614208565b9050919050565b60006020820190508181036000830152614ab98184614294565b905092915050565b6000602082019050614ad6600083018461437d565b92915050565b600061014082019050614af2600083018d61437d565b8181036020830152614b04818c613b9a565b9050614b13604083018b61437d565b614b20606083018a61437d565b614b2d608083018961437d565b614b3a60a083018861437d565b614b4760c083018761437d565b614b5460e083018661437d565b614b6261010083018561437d565b614b7061012083018461437d565b9b9a5050505050505050505050565b6000604082019050614b94600083018561437d565b614ba1602083018461437d565b9392505050565b6000614bb2614bc3565b9050614bbe8282614ece565b919050565b6000604051905090565b600067ffffffffffffffff821115614be857614be761501a565b5b614bf182615049565b9050602081019050919050565b600067ffffffffffffffff821115614c1957614c1861501a565b5b614c2282615049565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000614c8e82614e43565b9150614c9983614e43565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115614cce57614ccd614f8d565b5b828201905092915050565b6000614ce482614e4d565b9150614cef83614e4d565b92508260ff03821115614d0557614d04614f8d565b5b828201905092915050565b6000614d1b82614e43565b9150614d2683614e43565b925082614d3657614d35614fbc565b5b828204905092915050565b6000614d4c82614e43565b9150614d5783614e43565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d9057614d8f614f8d565b5b828202905092915050565b6000614da682614e43565b9150614db183614e43565b925082821015614dc457614dc3614f8d565b5b828203905092915050565b6000614dda82614e23565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015614e87578082015181840152602081019050614e6c565b83811115614e96576000848401525b50505050565b60006002820490506001821680614eb457607f821691505b60208210811415614ec857614ec7614feb565b5b50919050565b614ed782615049565b810181811067ffffffffffffffff82111715614ef657614ef561501a565b5b80604052505050565b6000614f0a82614e43565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614f3d57614f3c614f8d565b5b600182019050919050565b6000819050919050565b6000819050919050565b6000614f6782614e43565b9150614f7283614e43565b925082614f8257614f81614fbc565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f7d2c7b2274726169745f74797065223a2022496e74656c6c6967656e6365222c60008201527f20226d61785f76616c7565223a20313030302c202276616c7565223a20000000602082015250565b7f746f6b656e20686173206e6f74206265656e206d696e74656420796574000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f7d2c7b2274726169745f74797065223a2022446578746572697479222c20226d60008201527f61785f76616c7565223a20313030302c202276616c7565223a20000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f426c6f6f6453706f727420230000000000000000000000000000000000000000600082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f3c2f746578743e3c7465787420783d273530252720793d27363225273e53747260008201527f656e6774683a2000000000000000000000000000000000000000000000000000602082015250565b7f3c73766720786d6c6e733d27687474703a2f2f7777772e77332e6f72672f323060008201527f30302f73766727206865696768743d27353030272077696474683d273530302760208201527f20746578742d616e63686f723d276d6964646c65272066696c6c3d277768697460408201527f652720666f6e742d73697a653d27312e35656d273e3c7265637420776964746860608201527f3d2735303027206865696768743d2735303027207374796c653d2766696c6c3a60808201527f626c61636b3b272f3e3c7465787420783d273530252720793d2732302527206660a08201527f6f6e742d73697a653d2732656d273e000000000000000000000000000000000060c082015250565b7f3c2f746578743e3c7465787420783d273530252720793d27383225273e44757260008201527f6162696c6974793a200000000000000000000000000000000000000000000000602082015250565b7f7d2c7b2274726169745f74797065223a20224850222c20226d61785f76616c7560008201527f65223a20323030302c202276616c7565223a2000000000000000000000000000602082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f746f6b656e55524920697320616c726561647920736574000000000000000000600082015250565b7f3c2f746578743e3c7465787420783d273530252720793d273435252720666f6e60008201527f742d73697a653d27312e35656d273e57696e733a200000000000000000000000602082015250565b7f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f3c2f746578743e3c2f7376673e00000000000000000000000000000000000000600082015250565b7f222c226465736372697074696f6e223a2022416e204e4654206669676874696e60008201527f672067616d65222c000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760008201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000602082015250565b7f4552433732313a2062616c616e636520717565727920666f7220746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460008201527f656e7420746f6b656e0000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f7d5d2c2022696d616765223a2022000000000000000000000000000000000000600082015250565b7f3c2f746578743e3c7465787420783d273530252720793d27373225273e41676960008201527f6c6974793a200000000000000000000000000000000000000000000000000000602082015250565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b7f7d2c7b2274726169745f74797065223a20224475726162696c697479222c202260008201527f6d61785f76616c7565223a20313030302c202276616c7565223a200000000000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f45524337323155524953746f726167653a2055524920717565727920666f722060008201527f6e6f6e6578697374656e7420746f6b656e000000000000000000000000000000602082015250565b7f7b2274726169745f74797065223a20224c6576656c222c20226d61785f76616c60008201527f7565223a203130302c202276616c7565223a2000000000000000000000000000602082015250565b7f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860008201527f697374656e7420746f6b656e0000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4d696e74696e67206973206e6f74206163746976650000000000000000000000600082015250565b7f7d2c7b2274726169745f74797065223a2022537472656e677468222c20226d6160008201527f785f76616c7565223a20313030302c202276616c7565223a2000000000000000602082015250565b7f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960008201527f73206e6f74206f776e0000000000000000000000000000000000000000000000602082015250565b7f3c2f746578743e3c7465787420783d273530252720793d27373725273e496e7460008201527f656c6c6967656e63653a20000000000000000000000000000000000000000000602082015250565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b7f7b226e616d65223a202200000000000000000000000000000000000000000000600082015250565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b7f3c2f746578743e3c7465787420783d273530252720793d27363725273e44657860008201527f7465726974793a20000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f436861696e4c696e6b20565246206973206e6f74207265616479000000000000600082015250565b7f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60008201527f776e6572206e6f7220617070726f766564000000000000000000000000000000602082015250565b7f7d2c7b2274726169745f74797065223a202257696e73222c202276616c75652260008201527f3a20000000000000000000000000000000000000000000000000000000000000602082015250565b7f3c2f746578743e3c6c696e652078313d27323025272079313d2732372527207860008201527f323d27383025272079323d2732372527207374796c653d277374726f6b653a7760208201527f68697465272f3e3c7465787420783d273530252720793d273337252720666f6e60408201527f742d73697a653d27312e35656d273e4c6576656c3a2000000000000000000000606082015250565b7f4d696e74696e67206973206f7665720000000000000000000000000000000000600082015250565b7f3c2f746578743e3c6c696e652078313d27323025272079313d2735302527207860008201527f323d27383025272079323d2735302527207374796c653d277374726f6b653a7760208201527f68697465272f3e3c7465787420783d273530252720793d27353725273e48503a60408201527f2000000000000000000000000000000000000000000000000000000000000000606082015250565b7f2261747472696275746573223a5b000000000000000000000000000000000000600082015250565b7f7d2c7b2274726169745f74797065223a20224167696c697479222c20226d617860008201527f5f76616c7565223a20313030302c202276616c7565223a200000000000000000602082015250565b615e2981614dcf565b8114615e3457600080fd5b50565b615e4081614de1565b8114615e4b57600080fd5b50565b615e5781614ded565b8114615e6257600080fd5b50565b615e6e81614df7565b8114615e7957600080fd5b50565b615e8581614e43565b8114615e9057600080fd5b5056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212204ce2a64f19d71dd6fc7b3a009f279935d631c764a36d1457aa33057ddc5462a564736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 435,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 437,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 441,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 445,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 449,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 455,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1372,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 273,
        "contract": "contracts/NFT.sol:NFT",
        "label": "_owner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 79,
        "contract": "contracts/NFT.sol:NFT",
        "label": "nonces",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2479,
        "contract": "contracts/NFT.sol:NFT",
        "label": "tokenCounter",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2481,
        "contract": "contracts/NFT.sol:NFT",
        "label": "fee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2483,
        "contract": "contracts/NFT.sol:NFT",
        "label": "keyHash",
        "offset": 0,
        "slot": "11",
        "type": "t_bytes32"
      },
      {
        "astId": 2485,
        "contract": "contracts/NFT.sol:NFT",
        "label": "trainingContract",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 2487,
        "contract": "contracts/NFT.sol:NFT",
        "label": "fightingContract",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 2489,
        "contract": "contracts/NFT.sol:NFT",
        "label": "cost",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 2491,
        "contract": "contracts/NFT.sol:NFT",
        "label": "maxSupply",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2493,
        "contract": "contracts/NFT.sol:NFT",
        "label": "paused",
        "offset": 0,
        "slot": "16",
        "type": "t_bool"
      },
      {
        "astId": 2498,
        "contract": "contracts/NFT.sol:NFT",
        "label": "tokenIdToFighter",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_struct(Fighter)2146_storage)"
      },
      {
        "astId": 2502,
        "contract": "contracts/NFT.sol:NFT",
        "label": "requestIdToSender",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 2506,
        "contract": "contracts/NFT.sol:NFT",
        "label": "requestIdToTokenId",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2510,
        "contract": "contracts/NFT.sol:NFT",
        "label": "tokenIdToRandomNumber",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Fighter)2146_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct lib.Fighter)",
        "numberOfBytes": "32",
        "value": "t_struct(Fighter)2146_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Fighter)2146_storage": {
        "encoding": "inplace",
        "label": "struct lib.Fighter",
        "members": [
          {
            "astId": 2127,
            "contract": "contracts/NFT.sol:NFT",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2129,
            "contract": "contracts/NFT.sol:NFT",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2131,
            "contract": "contracts/NFT.sol:NFT",
            "label": "level",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2133,
            "contract": "contracts/NFT.sol:NFT",
            "label": "wins",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2135,
            "contract": "contracts/NFT.sol:NFT",
            "label": "hp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2137,
            "contract": "contracts/NFT.sol:NFT",
            "label": "strength",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2139,
            "contract": "contracts/NFT.sol:NFT",
            "label": "dexterity",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2141,
            "contract": "contracts/NFT.sol:NFT",
            "label": "agility",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 2143,
            "contract": "contracts/NFT.sol:NFT",
            "label": "intelligence",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 2145,
            "contract": "contracts/NFT.sol:NFT",
            "label": "durability",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}